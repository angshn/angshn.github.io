import{_ as e,o as r,c as o,e as d,a as t}from"./app-Ec_z8kpw.js";const n={},a=d('<figure><img src="https://cdn.jsdelivr.net/gh/angshn/imageshome@main/imgs/deyo/arch.png"><figcaption style="text-align:center;"><strong>Fig.1. DEYO架构图</strong></figcaption></figure><h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract"><span>Abstract</span></a></h2><p>与传统的目标检测模型相比，DETR的query含义是<strong>含糊不清</strong>的 作者在分步的概念激发下，提出了一个新的两阶段(two-stage)检测模型——DEYO(DETR With YOLO)。DEYO使用渐进式的方法解决了上述问题（可能指query vague）。 DEYO是一个两阶段架构的目标检测模型，经典的目标检测和DETR-like模型分别作为模型的第一阶段和第二阶段。 第一个阶段向第二阶段提供高质量的query和anchor，与vanilla DETR相比效率和性能有所提高。第二阶段缓解了第一阶段造成的性能下降。</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>尽管DETR有很多吸引人的特点，但是他存在一些问题。首先，vanilla DETR需要高达500epochs才能达到看起来还不错的表现。其次，DETR query实际意义模糊不清，这点限制了其被充分利用。一系列的DETR方法被开发来解决这些问题。例如，DAB-DETR直接使用4D的anchor box作为query，并且使用decoder层近优化box。</p><p>虽然相关的工作已经很大程度上改进了DETR-like模型，但是预测ont-to-one的目标集合仍然很困难。鉴于DETR中Transformer模型的计算复杂度与queries的数量平方相关，因此DETR-like的模型的queries数量通常设置在[100,900]之间，例如在vanilla中是100。与DETR相比，YOLO预测有更小的计算负担。受Step-by-Step启发，作者提出了用消耗更少资源和可生成高质量YOLO预测作为第二阶段DETR-like模型的输入以降低one-to-one目标预测的难度。作者提出的这种策略使DETR-like模型能够在有限的查询数量情况下专注于挑战性的任务，比如难以识别的物体和<strong>严重遮挡的物体</strong>。</p><p>高质量的YOLO初始化query、锚框和DETR的初始化query、初始化锚框被组合送入decoder。实际上Decoder的功能专注于微调初始的边界框（这一点在SparseRCNN中尤其明显），验证和调整分类，并且能够预测因为少数遮挡或者第一阶段不容易识别而被NMS过滤的物体。高质量的query和anchor能够降低二分匹配的不稳定性同时加速detr训练。</p><blockquote><p>使用明显两阶段方法能够使得decoder部分专注于更难的任务，</p></blockquote><p>文章的贡献有三点：</p><ol><li><p>设计了一个新的两阶段模型。精确度提升了一个新水平，detr-like的收敛从某种角度大幅减少</p></li><li><p>克服了由于NMS造成的性能瓶颈问题，分析了经典检测器的潜在能力。</p></li><li><p>基于实验验证了想法。</p></li></ol><h2 id="related-works" tabindex="-1"><a class="header-anchor" href="#related-works"><span>Related Works</span></a></h2><p>从YOLO、NMS和DETR三个方向分别介绍了历史。</p><p>&quot;Let&#39;s think step by step&quot;模式可以使困难任务被一步一步解决而不是一次性得出正确答案（YOLO想要直接得到Bounding box）。受该模式启发，作者让第一阶段只预测简单的任务而不是直接得到答案，第二阶段只专注于困难任务，一步一步降低难度。</p><p><strong>总之就是将任务分为多步，每个阶段处理前一段的中间结果。</strong></p><h2 id="let-s-think-step-by-step" tabindex="-1"><a class="header-anchor" href="#let-s-think-step-by-step"><span>Let&#39;s think step by step</span></a></h2><p>作者在这一节需要证明为什么基于<strong>step by step</strong>模型就可以有效果。</p><p><strong>1. High-quality query initialization speeds up traning.</strong></p><p>高质量的query初始化加速了训练，DETR使用匈牙利匹配算法直接生成one-to-one的集合匹配结果。但是二分匹配是不稳定的，是造成DETR-like训练速度慢的主要元凶。模型早起的优化目标和收敛时的目标可能完全不同，称作目标的不一致性，这在训练早起尤其明显。因此作者想到用高质量的query和anchor输入到decoder来优化二分匹配的早起表现，使其能够早点收敛。作者用在第一个epoch就达到40.6 AP的成绩来证明高质量query和anchor的表现。</p><ol start="2"><li><strong>Breaking through the performance bottleneck caused by nms</strong></li></ol><p>经典检测器需要生成大量的可能包含重复预测的bounding box，这些bbox会在后续处理中被NMS抑制（设置NMS threshold过滤掉重合度太高的bbox），不同任务设置不同的NMS阈值是很容易在bbox的保留和删除时出错的。</p><blockquote><p>作者提到了一个<em>pre-matching filtering</em>的操作，可能只是在YOLO中用到了，有待考证。</p></blockquote><ol start="3"><li><strong>one to many with one-to-one</strong></li></ol><p>one-to-one标签分配会在query数量达到某个值时造成性能衰退，one-to-one标签分配没发在query达到最大数量时达到峰值性能。DEYO同时结合了one-to-many和one-to-one的优点解决了这个问题。在PRE-DEYO中使用了one-to-many分配方法，从超过20,000个查询中选出100个高质量的query作为POST-DEYO的输入。</p><blockquote><p>也就是说模型的性能并不是与query的数量线性相关，这一点在DDQ中也被提及。单纯的提高query的数量不能总是提高模型的性能，相反在达到某个数量之后会出现性能衰退。</p></blockquote><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><p>DEYO使用了YOLOv5作为DEYO的first stage，DINO作为second stage。本文中使用PRE-DEYO代表YOLOv5，POST-DEYO代表DINO。PRE-DEYO的输出组合了经过<strong>transition components</strong>生成的初始化query和anchor作为decoder的输入。PRE-DEYO的输出直接与GT信息进行匹配，这一策略降低了POST-DEYO的二分匹配的不稳定性。</p><p><strong>Transition Components</strong> 该模块用于处理PRE-DEYO送到POST-DEYO的信息，确保信息解释的一致性和确保从PRE-DEYO中获取的信息是最适合POST-DEYO的。</p><p><strong>Prediction Selection</strong> PRE-DEYO会生成很多近乎相同的预测信息，如果不经过任何过滤那么这些信息会让POST-DEYO崩溃。而POST-DEYO的过滤能是优先的（自注意力机制和CDN），因此作者在这里引入了NMS机制（有点迷惑，但是好像没有更好的方法去重），使用一个合适的IoU阈值就可以得到（相对）高质量的query和anchor。作者提到NMS操作并不会使得模型的最终能力下降，因为在POST-DEYO阶段中，由于NMS操作被保留或者删除的query和anchor都会被decoder所补偿（<em>补偿是啥意思，就是说多了少了不重要，只要质量高就行？</em>）</p><p><strong>Padding</strong> 每张图片最终生成的query和anchor都是动态的，再经过NMS处理之后就更不一致了，为了提供指定数量的query和anchor，作者在这里提出了一个Padding操作。被填充的这些凑数query和anchor不参与最终的loss计算和二分匹配（也就是不参与模型参数的更新）。</p>',29),s=t("caption",null,[t("strong",null,"Table.1. 实验效果对比表")],-1),h=d('<table><thead><tr><th>Model</th><th>Epochs</th><th>AP</th><th>AP50</th><th>AP75</th><th>APS</th><th>APM</th><th>APL</th><th>Params</th><th>FPS</th></tr></thead><tbody><tr><td>Faster-RCNN(5scale)[34]</td><td>12</td><td>37.9</td><td>58.8</td><td>41.1</td><td>22.4</td><td>41.1</td><td>49.1</td><td>40M</td><td>21∗</td></tr><tr><td>DETR(DC5)[3]</td><td>12</td><td>15.5</td><td>29.4</td><td>14.5</td><td>4.3</td><td>15.1</td><td>26.7</td><td>41M</td><td>20</td></tr><tr><td>Deformable DETR(4scale)  [45]</td><td>12</td><td>41.1</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>40M</td><td>24</td></tr><tr><td>DAB-DETR(DC5)† [26]</td><td>12</td><td>38.0</td><td>60.3</td><td>39.8</td><td>19.2</td><td>40.9</td><td>55.4</td><td>44M</td><td>17</td></tr><tr><td>Dynamic DETR(5scale) [7]</td><td>12</td><td>42.9</td><td>61.0</td><td>46.3</td><td>24.6</td><td>44.9</td><td>54.4</td><td>58M</td><td>_</td></tr><tr><td>Dynamic Head(5scale)x [6]</td><td>12</td><td>43.0</td><td>60.7</td><td>46.8</td><td>24.7</td><td>46.4</td><td>53.9</td><td>–</td><td>_</td></tr><tr><td>HTC(5scale) [4]</td><td>12</td><td>42.3</td><td>–</td><td>–</td><td>–</td><td>–</td><td>–</td><td>80M</td><td>5∗</td></tr><tr><td>DN-Deformable DETR(4scale)†[21]</td><td>12</td><td>43.4</td><td>61.9</td><td>47.2</td><td>24.8</td><td>46.8</td><td>59.4</td><td>48M</td><td>23</td></tr><tr><td>DINO-4scale† [43]</td><td>12</td><td>49.0</td><td>66.6</td><td>53.5</td><td>32.0</td><td>52.3</td><td>63.0</td><td>47M</td><td>24</td></tr><tr><td>DINO-5scale† [43]</td><td>12</td><td>49.4</td><td>66.9</td><td>53.8</td><td>32.3</td><td>52.5</td><td>63.9</td><td>47M</td><td>10</td></tr><tr><td>DEYO-4scale</td><td>12</td><td><strong>50.4</strong></td><td>68.4</td><td>54.9</td><td>33.4</td><td>54.3</td><td>64.9</td><td>132M</td><td>12</td></tr><tr><td>DEYO-4scale†</td><td>12</td><td><strong>50.6</strong></td><td><strong>68.7</strong></td><td>55.1</td><td>33.4</td><td>54.7</td><td>65.3</td><td>132M</td><td>12</td></tr></tbody></table><p>后续的操作都是为了让PRE-DEYO和POST-DEYO的各种参数能够对其，例如lable、category信息编码和图像尺寸。</p><h2 id="results" tabindex="-1"><a class="header-anchor" href="#results"><span>Results</span></a></h2><table><thead><tr><th>12 epochs</th><th>36 epochs</th></tr></thead><tbody><tr><td>50.6 AP</td><td>52.1 AP</td></tr></tbody></table><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><h2 id="others" tabindex="-1"><a class="header-anchor" href="#others"><span>Others</span></a></h2><ol><li>在Crowdhuman上的MR达到0.398</li><li>让decoder只接受那些有高度差异性的query和anchor，decoder的去重能力有限，</li></ol>',7),c=[a,s,h];function i(l,p){return r(),o("div",null,c)}const E=e(n,[["render",i],["__file","DEYO.html.vue"]]);export{E as default};
