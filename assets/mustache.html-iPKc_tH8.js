import{_ as t,r as p,o as c,c as o,a,d as n,b as l,e as s}from"./app-Ec_z8kpw.js";const i={},u=s(`<h1 id="java-mustache-模板渲染" tabindex="-1"><a class="header-anchor" href="#java-mustache-模板渲染"><span>Java Mustache 模板渲染</span></a></h1><p>在开发中碰到一个这样的重构需求，在原代码中使用的纯字符串拼接，例如<code>&quot;name=&quot;+name+&quot;,age=&quot;+age</code>，但是在大量的代码拼接中就显得有些笨重且维护困难。如果能够将<strong>freemakar</strong>或者<strong>themeleaf</strong>中的类似模板渲染功能拿过来就好了，经过调研之后发现有轻量级的<strong>Mustache</strong>实现。因此本文简介Mustache以及给出对应的demo。</p><h2 id="mustache简介" tabindex="-1"><a class="header-anchor" href="#mustache简介"><span>Mustache简介</span></a></h2><p>Mustache是一类无逻辑引擎(Logic less)，也就是说Mustache不支持<strong>if</strong>和<strong>for</strong>循环。Mustache支持的模板由<code>{{}}</code>标记组成。通过编写对应的模板文件或者字符串就可以避免字符串拼接的工作。一个可能的模板字符串如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{{name}}, {{age}}&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设我们有一个实例——<code>name=angshn, age=18</code>，那么如何将这个字符串渲染为<code>angshn, 18</code>呢？这就需要用到mustache的java实现。</p><h2 id="maven依赖" tabindex="-1"><a class="header-anchor" href="#maven依赖"><span>maven依赖</span></a></h2><p>如果要在java中使用mustache功能，就需要先引入对应的依赖。</p><div class="language-pom line-numbers-mode" data-ext="pom" data-title="pom"><pre class="language-pom"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.github.spullara.mustache.java&lt;/groupId&gt;
    &lt;artifactId&gt;compiler&lt;/artifactId&gt;
    &lt;version&gt;0.9.11&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),r={href:"https://github.com/samskivert/jmustache",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用"><span>简单使用</span></a></h2><h3 id="定义模板" tabindex="-1"><a class="header-anchor" href="#定义模板"><span>定义模板</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{{name}} \\n{{age}} \\n{{phone}}&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定义上下文参数" tabindex="-1"><a class="header-anchor" href="#定义上下文参数"><span>定义上下文参数</span></a></h3><p>为了能够对参数赋予实际意义切方便维护，我们使用定义一个实体类的方式来定义模板的参数。除了实体类也可以使用HashMap作为上下文参数持有者。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染模板" tabindex="-1"><a class="header-anchor" href="#渲染模板"><span>渲染模板</span></a></h3><p>用了模板的填充参数<code>context</code>后，就可以使用Mustache工具类来填充模板了。我们定义一个工具类来处理模板和对应的参数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//TemplateUtil.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplatesUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">String</span> template<span class="token punctuation">,</span> <span class="token class-name">Object</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMustacheFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMustacheFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Mustache</span> machine <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        machine<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用工具类可以很轻松的渲染模板，我们来看看效果</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">&quot;{{name}} \\n{{age}} \\n{{phone}}&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">UserContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;angshn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">&quot;12345678901&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">TemplatesUtil</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//angshn </span>
        <span class="token comment">//18 </span>
        <span class="token comment">//12345678901</span>
        <span class="token class-name">String</span> excepted <span class="token operator">=</span> <span class="token string">&quot;angshn \\n18 \\n12345678901&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> excepted<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function k(m,v){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,a("p",null,[n("除了该实现外，还有"),a("a",r,[n("jmustache"),l(e)]),n("可以使用。")]),d])}const g=t(i,[["render",k],["__file","mustache.html.vue"]]);export{g as default};
