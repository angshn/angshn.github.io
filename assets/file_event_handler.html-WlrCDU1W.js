import{_ as e,o as a,c as r,e as o}from"./app-Ec_z8kpw.js";const s={},t=o('<h2 id="redis的事件" tabindex="-1"><a class="header-anchor" href="#redis的事件"><span>Redis的事件</span></a></h2><p>Redis服务器是一个事件驱动程序，服务器处理两类事件：<strong>文件事件</strong>和<strong>时间事件</strong></p><p><strong>文件事件</strong>是服务器对套接字操作的抽象，客户端和服务器通信会产生对应的文件事件，服务器会监听这些事件来完成操作。</p><p><strong>时间事件</strong>：Redis服务器的一些操作需要在某些时间点执行，这类事件就是对定时任务的抽象。</p><h2 id="reactor模式" tabindex="-1"><a class="header-anchor" href="#reactor模式"><span>Reactor模式</span></a></h2><p>Reactor模式只需要一个或者少量线程就能同时处理多个用户请求。Nodejs和Nginx中就是用了Reactor模式。</p><h2 id="文件事件" tabindex="-1"><a class="header-anchor" href="#文件事件"><span>文件事件</span></a></h2><p>Redis基于Reactor开发了自己的网络事件处理器——文件事件处理器(file event handler,FEH)。FEH使用I/O多路复用来同时监听多个套接字，并根据套接字目前的状态来为套接字关联不同的事件处理器。当套接字准备好执行accept、read、write和close操作室，对应的文件事件就产生了，这时候就调用对应的文件事件处理器来执行操作。</p><h2 id="文件事件处理器" tabindex="-1"><a class="header-anchor" href="#文件事件处理器"><span>文件事件处理器</span></a></h2><ol><li><strong>连接应答处理器</strong></li></ol><p>该处理器用于对监听套接字的客户端进行应答，通常与<code>AE_READABLE</code>事件关联。</p><ol start="2"><li>命令请求处理器</li></ol><p>这个处理器负责从套接字中读取客户端发送的命令请求内容，通常与<code>AE_READABLE</code>事件关联。</p><ol start="3"><li><strong>命令回复处理器</strong></li></ol><p>该处理器用于将执行命令之后的结果通过套接字返回给客户端，通常与<code>AE_WRITABLE</code>事件关联。</p>',15),n=[t];function c(d,i){return a(),r("div",null,n)}const p=e(s,[["render",c],["__file","file_event_handler.html.vue"]]);export{p as default};
