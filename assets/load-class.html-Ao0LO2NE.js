import{_ as e,o as a,c,e as l}from"./app-Ec_z8kpw.js";const o={},t=l('<h1 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h1><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>初始化阶段是类加载过程的最后一个步骤。初始化阶段会根据会根据程序员的议员初始化类变量和其他资源。具体实现上是编译器会自动生成一个叫做<code>clinit&lt;&gt;()</code>的方法，在类加载时会自动执行。<code>clinit&lt;&gt;()</code>方法会在父类<code>clinit&lt;&gt;()</code>执行之后再执行，因此虚拟机中总是会先执行<code>java.lang.Object</code>类的<code>clinit&lt;&gt;()</code>方法。</p><p>需要注意的是，多线程情况下初始化类会自动加锁，保证一个时刻只有一个线程执行某个类的<code>clinit&lt;&gt;()</code>方法</p><h3 id="类初始化时机" tabindex="-1"><a class="header-anchor" href="#类初始化时机"><span>类初始化时机</span></a></h3><p>只有用到类的时候才会触发类的初始化并执行<code>clinit&lt;&gt;()</code>方法，可以概括为以下六种：</p><ol><li>new对象、访问类的静态属性或方法。</li><li>反射调用类。如调用<code>Class.forname(),newInstance()</code>方法。</li><li>父类未初始化先初始化父类。</li><li>虚拟机启动时先初始化包含main方法的类。</li><li>MethodHandle和VarHandle，先使用<code>findStaticVarHandle</code>初始化目标类</li><li>java8中接口的<code>default</code>方法，如果一个实现类药进行初始化，那么接口的要在其之前初始化。</li></ol><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h3><ol><li>使用类的初始化实现静态内部类的线程安全单例模式。</li></ol>',9),d=[t];function n(i,s){return a(),c("div",null,d)}const h=e(o,[["render",n],["__file","load-class.html.vue"]]);export{h as default};
