import{_ as t,r as o,o as p,c as d,a as s,d as a,b as e,e as i}from"./app-Ec_z8kpw.js";const c={},r=i(`<h2 id="用户数据表" tabindex="-1"><a class="header-anchor" href="#用户数据表"><span>用户数据表</span></a></h2><p>用户数据表应该存储用户的基本信息，一般的设计表如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>键</th><th>为空</th><th>默认</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>PRI</td><td>no</td><td></td><td>用户唯一索引</td></tr><tr><td>name</td><td>varchar</td><td></td><td>no</td><td></td><td>用户昵称</td></tr><tr><td>avatar_url</td><td>varchar</td><td></td><td>yes</td><td></td><td>头像地址</td></tr><tr><td>phone</td><td>varchar</td><td>UNI</td><td>yes</td><td></td><td>手机号</td></tr><tr><td>password</td><td>varchar</td><td></td><td>yes</td><td></td><td>密码</td></tr><tr><td>created_at</td><td>timestamp</td><td></td><td>no</td><td></td><td>创建时间</td></tr><tr><td>updated_at</td><td>timestamp</td><td></td><td>yes</td><td></td><td>更新时间</td></tr></tbody></table><p>用户表创建语句:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> users{
    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户唯一索引&#39;</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>
    avatar_url <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户头像地址&#39;</span><span class="token punctuation">,</span>
    phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户手机号&#39;</span><span class="token punctuation">,</span>
    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户密码，加密后，128位二进制，32位16进制&#39;</span><span class="token punctuation">,</span>
    created_at <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> commment <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
    update_at <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;修改时间&#39;</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
}<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的时间类型使用了<code>timestamp</code>而不是<code>datetime</code>，<code>timestamp</code>使用<strong>4B</strong>来存储时间（datatime是8B），因此使用<code>timestamp</code>存储数据能更好的节省存储空间消耗，其时间范围是<code>1970-01-01 00:00:01 ~ 2037-12-31 23:59:59</code>。也就是说<code>timestamp</code>最多到<strong>2038</strong>年就无法再继续使用了。此外，<code>timestamp</code>还携带了时区信息，不同时区下读取的数据不一样。</p><h2 id="用户密码加密" tabindex="-1"><a class="header-anchor" href="#用户密码加密"><span>用户密码加密</span></a></h2><p>用户密码存储方式一般有六种：</p><ul><li>明文存储。最简单但是最不安全。</li><li>对称加密算法。DES,ASE,这种方式可以通过密钥加密和还原，但是有密钥泄漏风险。</li><li>非对称加密算法。MD5,SHA1等Hash算法，无法通过计算得到用户密码，但是有被彩虹表攻击的风险。</li><li>加盐的非对称加密。盐+密码生成密文密码，可以进行多次加密。跟对称加密类似，盐不能泄漏。</li><li>PBDKF2算法。在Hash算法上添加随机盐，进行多次Hash运算。</li><li>Bcrypt、Scrypt等算法。有效抵御彩虹表攻击危险，每次使用会随机生成盐，因此会出现同样的明文生成的密文不一样的情况。</li></ul><h2 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计"><span>接口设计</span></a></h2><p>登陆系统中有两个重要的借口：用户注册和用户登录。</p><h3 id="用户注册" tabindex="-1"><a class="header-anchor" href="#用户注册"><span>用户注册</span></a></h3><p>用户注册接口用来接受用户输入表单，服务器根据输入数据来新增一条用户记录。为了避免密码在传输过程中泄漏，使用Hash算法加盐加密一次。</p><p>资源路径：<code>POST /users</code></p><p>消息体：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;syang&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;13312918771&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;F447B20A7FCBF53A5D5BE013EA0B15AF&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户登录" tabindex="-1"><a class="header-anchor" href="#用户登录"><span>用户登录</span></a></h3><p>用户登录时还是依旧会输入明文密码，但是传输之前还是需要进行MD5加盐确保明文不泄漏。服务器接收到之后再对密文进行一次MD5加盐加密，取出数据库中记录密文和当前密文是否一致。若一致则登录通过记录用户信息并且写入Cookie，否则告诉用户账号或密码错误等信息。</p><p><code>POST /users/login</code></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;13312918771&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;F447B20A7FCBF53A5D5BE013EA0B15AF&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用户信息记录" tabindex="-1"><a class="header-anchor" href="#用户信息记录"><span>用户信息记录</span></a></h2><p>Web应用中客户端与服务器通信通常通过Http协议进行沟通，而Http协议是无状态的应用层协议，如果要记住用户信息的话就需要使用<code>Cookie</code>和<code>Session</code>技术。</p><h3 id="session的生成" tabindex="-1"><a class="header-anchor" href="#session的生成"><span>Session的生成</span></a></h3><p>客户端请求服务器切服务器调用<code>HttpServletRequest.getSession(true)</code>方法时会生成一个Session对象，同时也会生成一个<code>sessionid</code>。 <code>sessionid</code>在Tomcat的默认生成方式是<strong>随机数+时间+jvmid</strong>。<code>sessionid</code>会被通过Cookie或者<code>url</code>重写的方式告诉给请求者，以后的请求中都要携带这个<code>sessionid</code>作为身份认证。</p><h3 id="session的销毁" tabindex="-1"><a class="header-anchor" href="#session的销毁"><span>Session的销毁</span></a></h3><p>session的销毁的有三种场景：</p><ul><li>session超时。tomcat默认30分钟无动作就会删除该session（可以使用延时队列来实现）</li><li>服务端主动销毁：调用<code>HttpSession.invalidate()</code>方法销毁该session</li><li>服务端程序关闭。</li></ul><h3 id="session和cookie" tabindex="-1"><a class="header-anchor" href="#session和cookie"><span>Session和Cookie</span></a></h3><p><strong>Cookie</strong>是一种可以在客户端存储用户数据的技术。</p><p><strong>Session</strong>用来在服务器端记录用户状态。该方式主要是用来解决HTTP请求无状态的问题。</p><p>Cookie和Session解决方案下的请求流程一般有五步：</p><ol><li>用户使用用户名密码等信息访问服务端请求登录。</li><li>服务器验证通过后会创建一个Session，并将用户信息存储到该Session中</li><li>将该Session的sessionid写入到响应的Cookie中，使得用户可以得到sessionid</li><li>用于访问其他资源时会在Cookie中携带sessionid。</li><li>服务器接收到请求之后会从Cookie中拿到sessionid，然后使用该sessionid与服务器中当前存储的session信息进行对比，验证通过后会告知用户当前的状态。</li></ol><h3 id="多服务节点场景下的session管理" tabindex="-1"><a class="header-anchor" href="#多服务节点场景下的session管理"><span>多服务节点场景下的Session管理</span></a></h3><p>分布式场景下无法做到session共享，不同服务节点拥有不同的服务session，A节点和B节点不能共享session信息，难免会造成用户在A服务节点时登录状态，在B节点时未登录状态。要做到多服务节点下的<strong>session一致性</strong>，有这样几个方法：</p><ol><li>某个用户请求一致路由到某个固定的服务节点。缺点是如果目标服务节点宕机就会造成session丢失，用户登录状态失效。</li><li>所有节点session同步。每个服务节点定时将自己的session同步给其他节点。缺点是成本高，切一致性较差。</li><li>使用单独服务来保存session信息。例如使用redis等nosql数据库来保存session信息，这样所有服务节点都能访问到统一的sesion信息。缺点是要保证不能出现单点故障，通常是以集群方式部署确保可用性。<strong>Spring Session</strong>是一个该方法的实现。</li></ol><h3 id="cookie和session方案的缺陷" tabindex="-1"><a class="header-anchor" href="#cookie和session方案的缺陷"><span>Cookie和Session方案的缺陷</span></a></h3><p>Cookie方案会有被CSRF(Cross Site Request Forgery)跨站请求伪造攻击的风险，其他钓鱼网站会冒用用户身份向其他网站发起请求。此时Cookie信息就会携带sessionid发送到目标服务器，形成了一次CSRF攻击。</p><p>使用<strong>Token</strong>机制可以避免CSRF攻击，原因就是Cookie和Token存储的方式不一致，<code>Token</code>通常会被存放在<code>localStorage</code>中，与Cookie不同的是存储在<code>localstorage</code>中的信息需要手动追加传输，而Cookie通常会自动携带，所以也就避免了CSRF攻击发生的可能。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,39),l={href:"https://learnku.com/articles/20074",target:"_blank",rel:"noopener noreferrer"},u={href:"https://zhuanlan.zhihu.com/p/113984411",target:"_blank",rel:"noopener noreferrer"};function k(h,m){const n=o("ExternalLinkIcon");return p(),d("div",null,[r,s("p",null,[s("a",l,[a("1. 可扩展的用户表设计"),e(n)])]),s("p",null,[s("a",u,[a("2. 用户密码到底要怎么加密存储？"),e(n)])])])}const b=t(c,[["render",k],["__file","index.html.vue"]]);export{b as default};
