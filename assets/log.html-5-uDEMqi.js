import{_ as o,o as e,c as d,e as c}from"./app-Ec_z8kpw.js";const a={},l=c('<h2 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>redo log</span></a></h2><p>物理日志，记录对实际物理页的修改操作，用于数据异常恢复。</p><h2 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog"><span>binlog</span></a></h2><p>记录了在某条语句的原始逻辑，用于主从同步保证一致性。有两种数据格式：</p><ul><li>statement</li><li>row</li></ul><h2 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>undo log</span></a></h2><p>undo log用于回滚数据，undo log先于数据写入写到磁盘中。</p><h2 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交"><span>两阶段提交</span></a></h2><p>将<code>redo log</code>的写入拆分成两个阶段<code>prepare</code>和<code>commit</code>，以此来解决<code>binlog</code>和<code>redo log</code>内容不一致的问题。</p><p>当<code>binlog</code>写入发生异常时，<code>MySQL</code>根据<code>redo log</code>恢复数据是，如果发现<code>redo log</code>还在<code>prepare</code>阶段并且没有对应的<code>binlog</code>日志就会回滚改事务。</p><p>如果在提交事务时<code>redo log</code>的<code>commit</code>阶段发生异常，那么MySQL在恢复数据时能够根据当前<code>redo log</code>的事务id在<code>binlog</code>找到对应的记录，此时已经事务执行完成了，就差继续提交了，因此MySQL会继续尝试提交当前事务来恢复数据。</p>',11),n=[l];function r(s,i){return e(),d("div",null,n)}const p=o(a,[["render",r],["__file","log.html.vue"]]);export{p as default};
