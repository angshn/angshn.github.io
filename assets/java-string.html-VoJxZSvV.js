import{_ as n,o as s,c as a,e as t}from"./app-Ec_z8kpw.js";const e={},p=t(`<h2 id="内存状态" tabindex="-1"><a class="header-anchor" href="#内存状态"><span>内存状态</span></a></h2><h2 id="字符串常量池" tabindex="-1"><a class="header-anchor" href="#字符串常量池"><span>字符串常量池</span></a></h2><p>字符串常量池用于减少字符串对内存的消耗以及提高性能开辟的一块特殊区域，主要是为了避免字符串的重复创建。</p><p>在jdk1.7之前，字符串常量池是在<strong>永久代</strong>，jdk1.7之后将字符串常量池挪到了<strong>堆</strong>中。</p><p><strong>创建一个字符串常量</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;A contant string&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字符串的创建" tabindex="-1"><a class="header-anchor" href="#字符串的创建"><span>字符串的创建</span></a></h2><p>java中创建字符串常量时，首先回去字符串常量池中查找是否已经创建了该常量，如果没有创建该常量则在字符串常量池中创建，如果创建了则返回该字符串常量的引用地址。如此新的字符串常量就指向了已经存在的变量。</p><p><strong>Code. 1</strong>展示了创建常量时的一种情况。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
# <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Code. 1</strong></p><h2 id="动态声明字符串对象" tabindex="-1"><a class="header-anchor" href="#动态声明字符串对象"><span>动态声明字符串对象</span></a></h2><p>使用<code>new</code>关键字动态新建一个字符串对象时可能会创建好几个字符串对象。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Code. 2</strong></p><p>以上代码在创建<code>s</code>对象时可能会创建两个对象。首先，堆中创建一个<code>String</code>对象，返回该对象的地址引用给<code>s</code>。之后，jvm使用<code>ldc</code>指令检查字符串常量池中有没有该字符串对象的<strong>引用</strong>。如果不存在引用，则会在字符串常量池中保存该对象的引用。</p><blockquote><p><strong>ldc 命令</strong>用于判断字符串常量池中是否保存了对应的字符串对象的引用，如果保存了的话直接返回，如果没有保存的话，会在堆中创建对应的字符串对象并将该字符串对象的引用保存到字符串常量池中。</p></blockquote><h2 id="intern方法" tabindex="-1"><a class="header-anchor" href="#intern方法"><span>intern方法</span></a></h2><p>intern方法用于将字符串对象的引用保存在字符串常量池中。遵循的一个简单原则是：有则返回，无则新建。</p><p>这里引用<strong>javaguide</strong>的一个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 在堆中创建字符串对象”Java“</span>
<span class="token comment">// 将字符串对象”Java“的引用保存在字符串常量池中</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 会在堆中在单独创建一个字符串对象</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span>
<span class="token comment">// s3对应的字符串应用已经在常量池中存在了，也就是s1对应的引用地址。</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1 和 s2 指向的是堆中的同一个对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// s3 和 s4 指向的是堆中不同的对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// s1 和 s4 指向的是堆中的同一个对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用<code>System.identityHashCode获取对象的实际地址</code></p></blockquote>`,23),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","java-string.html.vue"]]);export{u as default};
