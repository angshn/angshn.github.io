import{_ as u,r as c,o as e,c as p,a as n,b as s,w as a,d as t,e as r}from"./app-Ec_z8kpw.js";const d={},k=n("p",null,"可持久化线段树也叫主席树，主席树的叫法是网络调侃叫法，实际上就应该叫可持久化线段树。",-1),m=n("h2",{id:"简要说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简要说明"},[n("span",null,"简要说明")])],-1),Q=n("p",null,[t("可持久化线段树需要将历史数据同时保存，具体做法就是同时维护多颗线段树，每一颗线段树只跟前一个线段树保持不同。有"),n("code",null,"n"),t("个节点的可持久化线段是需要建"),n("code",null,"n"),t("个线段树，即每一个新元素都要建一个线段树。此为可持久化线段树的基本定义。")],-1),T=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://cdn.jsdelivr.net/gh/angshn/imageshome@main/imgs/datastruct/tree/segment-tree-pst/basic-tree.png"},null,-1),v=n("br",null,null,-1),h=n("div",{style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}}," 图1. 没有被优化的可持久化线段树",-1),b=n("p",null,"观察可知，每棵树跟前一棵树只有部分不同，他们是一个从根节点到叶节点的链。",-1),w=n("p",null,"从空间上来说每一个新节点都建立一个新的线段树有点浪费，因此优化过的线段树主要保存部分内容，通过树之间的联系来维持一个线段树。",-1),x=n("h2",{id:"主要应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#主要应用"},[n("span",null,"主要应用")])],-1),g=n("p",null,[t("可持久化线段树可以处理的经典问题是"),n("strong",null,"区间第K大/小"),t("问题。")],-1),y=n("h2",{id:"线段树相减",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#线段树相减"},[n("span",null,"线段树相减")])],-1),f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.522ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2440.7 1000","aria-hidden":"true"},_=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mo"},[n("path",{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(278,0)"},[n("path",{"data-c":"1D43F",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(959,0)"},[n("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1403.7,0)"},[n("path",{"data-c":"1D445",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(2162.7,0)"},[n("path",{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z",style:{"stroke-width":"3"}})])])],-1),H=[_],V=n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mo",{stretchy:"false"},"["),n("mi",null,"L"),n("mo",null,","),n("mi",null,"R"),n("mo",{stretchy:"false"},"]")],-1),M={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.522ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2440.7 1000","aria-hidden":"true"},L=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mo"},[n("path",{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(278,0)"},[n("path",{"data-c":"1D43F",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(959,0)"},[n("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1403.7,0)"},[n("path",{"data-c":"1D445",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(2162.7,0)"},[n("path",{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z",style:{"stroke-width":"3"}})])])],-1),Z=[L],D=n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mo",{stretchy:"false"},"["),n("mi",null,"L"),n("mo",null,","),n("mi",null,"R"),n("mo",{stretchy:"false"},"]")],-1),C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.112ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2259.7 1000","aria-hidden":"true"},j=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mo"},[n("path",{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mn",transform:"translate(278,0)"},[n("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(778,0)"},[n("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1222.7,0)"},[n("path",{"data-c":"1D445",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(1981.7,0)"},[n("path",{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z",style:{"stroke-width":"3"}})])])],-1),B=[j],z=n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mo",{stretchy:"false"},"["),n("mn",null,"1"),n("mo",null,","),n("mi",null,"R"),n("mo",{stretchy:"false"},"]")],-1),N={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.833ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3904.1 1000","aria-hidden":"true"},q=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mo"},[n("path",{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mn",transform:"translate(278,0)"},[n("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(778,0)"},[n("path",{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1222.7,0)"},[n("path",{"data-c":"1D43F",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(2125.9,0)"},[n("path",{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mn",transform:"translate(3126.1,0)"},[n("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(3626.1,0)"},[n("path",{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z",style:{"stroke-width":"3"}})])])],-1),R=[q],S=n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mo",{stretchy:"false"},"["),n("mn",null,"1"),n("mo",null,","),n("mi",null,"L"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]")],-1),G={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.682ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3837.6 1000","aria-hidden":"true"},J=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D442",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mo",transform:"translate(763,0)"},[n("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1152,0)"},[n("path",{"data-c":"1D459",d:"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"mi",transform:"translate(1450,0)"},[n("path",{"data-c":"1D45C",d:"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"msub",transform:"translate(1935,0)"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D454",d:"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z",style:{"stroke-width":"3"}})]),n("g",{"data-mml-node":"TeXAtom",transform:"translate(510,-150) scale(0.707)","data-mjx-texclass":"ORD"},[n("g",{"data-mml-node":"mn"},[n("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})])])]),n("g",{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD",transform:"translate(2848.6,0)"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])]),n("g",{"data-mml-node":"mo",transform:"translate(3448.6,0)"},[n("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1),O=[J],F=n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"l"),n("mi",null,"o"),n("msub",null,[n("mi",null,"g"),n("mrow",{"data-mjx-texclass":"ORD"},[n("mn",null,"2")])]),n("mrow",{"data-mjx-texclass":"ORD"},[n("mi",null,"n")]),n("mo",{stretchy:"false"},")")],-1),A=n("h2",{id:"空间优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#空间优化"},[n("span",null,"空间优化")])],-1),X=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://cdn.jsdelivr.net/gh/angshn/imageshome@main/imgs/datastruct/tree/segment-tree-pst/reduce-space.png"},null,-1),E=n("br",null,null,-1),K=n("div",{style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}}," 图2. 空间优化示意图",-1),I=r(`<p>每棵树只修改对应的链上节点，然后被修改的节点指向原始空树上的其他子节点，这样的一颗优化主席树在逻辑上就完整了。</p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// root[i]表示第i颗线段树的根节点编号</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token comment">//sum是节点的权值</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>tree<span class="token punctuation">[</span>N<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 用来建一颗空树，但是不需要真的执行</span>
<span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> pl<span class="token punctuation">,</span><span class="token keyword">int</span> pr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> rt <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>pl<span class="token operator">+</span>pr<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pl <span class="token operator">&lt;</span> pr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>pl<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">build</span> <span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 添加一颗新树</span>
<span class="token comment">// pre 前一棵树</span>
<span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> pl<span class="token punctuation">,</span><span class="token keyword">int</span> pr<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//获取当前树的根</span>
    <span class="token keyword">int</span> rt <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
    <span class="token comment">// 新树的当前节点指向前一棵树相同节点的左右儿子</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> tree<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> tree<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>
    <span class="token comment">// 因为新增了一个节点，因此当前节点的sum要+1</span>
    tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>pl<span class="token operator">+</span>pr<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">//向下递归建不超过lg(n)个节点</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pl <span class="token operator">&lt;</span> pr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 根据x的值决定在左右那个分支继续更新</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>pl<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            tree<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pr<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查找[u,v]区间的第k大</span>
<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> pl<span class="token punctuation">,</span><span class="token keyword">int</span> pr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pl <span class="token operator">==</span> pr<span class="token punctuation">)</span> <span class="token keyword">return</span> pl<span class="token punctuation">;</span>

    <span class="token comment">// 线段树相减</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">-</span> tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>

    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>pl<span class="token operator">+</span>pr<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//左二子的数量大于k时就证明做左子树中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>pl<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>

        <span class="token comment">//否则就再右儿子树中，这里还要减去x，在子树中药去除左树。</span>
        <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pr<span class="token punctuation">,</span>k<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 离散化</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span> <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>size<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>
        root<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>k<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>size<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function P(U,W){const i=c("center"),o=c("mjx-assistive-mml"),l=c("mjx-container");return e(),p("div",null,[k,m,Q,n("div",null,[s(i,null,{default:a(()=>[T,v,h]),_:1})]),b,w,x,g,y,n("p",null,[t("为了得到区间"),s(l,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(e(),p("svg",f,H)),s(o,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[V]),_:1})]),_:1}),t("的线段树，可以使用前缀和的思想，区间"),s(l,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(e(),p("svg",M,Z)),s(o,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[D]),_:1})]),_:1}),t("包含的元素等于区间"),s(l,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(e(),p("svg",C,B)),s(o,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[z]),_:1})]),_:1}),t("减去"),s(l,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(e(),p("svg",N,R)),s(o,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[S]),_:1})]),_:1})]),n("p",null,[t("时间复杂度： "),s(l,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(e(),p("svg",G,O)),s(o,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[F]),_:1})]),_:1})]),A,n("div",null,[s(i,null,{default:a(()=>[X,E,K]),_:1})]),I])}const $=u(d,[["render",P],["__file","persistence-segment-tree.html.vue"]]);export{$ as default};
