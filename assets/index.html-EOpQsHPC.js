import{_ as c,r as o,o as i,c as p,a as e,b as s,w as a,d as n,e as l}from"./app-Ec_z8kpw.js";const d={},r=l('<h2 id="通用工具类" tabindex="-1"><a class="header-anchor" href="#通用工具类"><span>通用工具类</span></a></h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 模板渲染</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 线程池：参考<strong>guava</strong></li></ul><h2 id="实现一个基本用户系统" tabindex="-1"><a class="header-anchor" href="#实现一个基本用户系统"><span>实现一个基本用户系统</span></a></h2>',3),h=l('<p>✅ 用户系统</p><p>✅ 分布式Session管理</p><p>✅ 用户登录状态判定</p><p>✅ 用户密码加密</p><p>⬜ java实现</p><h2 id="实现一个jdbc驱动" tabindex="-1"><a class="header-anchor" href="#实现一个jdbc驱动"><span>实现一个JDBC驱动</span></a></h2><p><strong>TODO</strong></p><h2 id="基于netty实现一个im应用" tabindex="-1"><a class="header-anchor" href="#基于netty实现一个im应用"><span>基于Netty实现一个IM应用</span></a></h2><p>⬜ 实现单聊</p><p>⬜ 实现群组聊天</p><h2 id="自己动手实现rpc" tabindex="-1"><a class="header-anchor" href="#自己动手实现rpc"><span>自己动手实现RPC</span></a></h2>',11),_=e("p",null,"RPC有主要由一下几个部分组成：",-1),u=e("li",null,"服务注册发现中心",-1),m=e("li",null,"服务调用，基于netty",-1),b=e("li",null,"编码器和解码器",-1),f=e("li",null,"序列化",-1),x=e("li",null,"动态代理",-1),k=e("li",null,"负载均衡",-1);function y(v,C){const t=o("RouterLink");return i(),p("div",null,[r,e("p",null,[s(t,{to:"/placeonfile/practice/user-system/"},{default:a(()=>[n("用户系统")]),_:1})]),h,e("p",null,[s(t,{to:"/practice/rpc-custom.html"},{default:a(()=>[n("手写RPC框架")]),_:1})]),_,e("ol",null,[u,m,e("li",null,[s(t,{to:"/java/rpc/dubbo-spi.html"},{default:a(()=>[n("SPI实现类加载")]),_:1})]),b,f,x,k])])}const N=c(d,[["render",y],["__file","index.html.vue"]]);export{N as default};
