import{_ as o,r as c,o as l,c as i,b as a,w as e,d as t,a as n,e as p}from"./app-Ec_z8kpw.js";const r={},u=n("h2",{id:"工作流程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#工作流程"},[n("span",null,"工作流程")])],-1),d=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://cdn.jsdelivr.net/gh/angshn/imageshome@main/imgs/java/spring-mvc/overflow.png"},null,-1),k=n("br",null,null,-1),v=n("div",{style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}},"图1. SpringMVC 简要原理",-1),m=p("<ol><li>客户端发送请求，Tomcat接受请求</li><li>Tomcat调用Filter进行过滤</li><li>传递请求到DispatcherServlet</li><li>DispatcherServlet根据请求信息调用<code>HandlerMapping</code>。<code>HandlerMapping</code>能根据地址找到对应的控制器处理器<code>Handler</code>,实际上是一个<code>HandlerMethod</code>对象</li></ol>",1),b=n("img",{style:{"border-radius":"0.3125em","box-shadow":"0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08)"},src:"https://cdn.jsdelivr.net/gh/angshn/imageshome@main/imgs/java/spring/springmvc/handler-type.png"},null,-1),g=n("br",null,null,-1),h=n("div",{style:{color:"#999","border-bottom":"1px solid #d9d9d9",display:"inline-block",padding:"2px"}}," 图. Handler的类型",-1),w=p(`<ol start="5"><li>将当前Handler封装获得一个HandlerAdapter实例，该实例包含了能够执行本次方法调用的丰富信息。</li><li>HandlerAdapter执行后会返回一个ModelAndView对象给DispatcherServlet</li><li>ViewResolver查找实际View</li><li>DS将返回的Model填充到View进行渲染</li><li>返回View给请求者</li></ol><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><h3 id="servlet-容器" tabindex="-1"><a class="header-anchor" href="#servlet-容器"><span>Servlet 容器</span></a></h3><blockquote><p>Servlet是运行在tomcat中的Java小程序。主要负责接受处理请求、响应数据等。</p></blockquote><p>Spring-mvc在Servlet的基础上做出了改进，<code>DispathcerServlet</code>与<code>Servlet</code>的功能相似。<code>DispathcerServlet</code>也叫前端控制器，来自前端的请求被tomcat处理之后会被传递到这里，然后会去匹配对应的<code>HandlerAdapter</code>和<code>Handler</code>作进一步处理。</p><p>简单理解就是，<code>Tomcat</code>服务器会先处理请求的协议部分，等到处理之后调用过滤器，如果请求被每个过滤器都放行了则会被传递给<code>Servlet</code>执行具体的处理，也就是<code>Spring MVC</code>中的<code>DispatcherServlet</code>。</p><p>Tomcat会使用Coyote Connector来接收请求，然后解析协议和应用Filter之后会将请求交给<code>DispathcerServlet</code>来处理。<code>Spring-mvc</code>使用<code>FrameworkServlet</code>来替代原来的各种<code>doXXX()</code>方法。</p><h3 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h3><p><strong>什么是过滤器</strong></p><p>过滤器是用于过滤所有的请求是否符合某种规则。通过Filter技术，可以实现用户在访问某个目标资源之前对访问的请求和响应进行拦截。</p><p>过滤器在服务器启动时只初始化一次。这点与拦截器不同。 <strong>Spring-MVC过滤器实现</strong></p><p>首先创建一个自定义的<code>Filter</code>接口的实现类，在该过滤器中我们检查请求中是否携带了自定义的请求头，如果没有携带则直接返回状态码<code>412</code>的消息。否则继续执行过滤链。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;CUSTOM-HEADER&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">HttpServletResponse</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_PRECONDITION_FAILED</span><span class="token punctuation">,</span><span class="token string">&quot;不合法的请求&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用过滤器</strong></p><p>Spring-MVC中使用<code>FilterRegistrationBean</code>来注册一个过滤器。使用<code>@Bean</code>注解想Spring容器中添加该过滤器容器。</p><p>还可以使用<code>@WebFilter</code>来注册一个过滤器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器"><span>拦截器</span></a></h3><p><strong>拦截器的作用</strong></p><p>拦截器是由Spring进行管理，存储在Spring IOC容器中的一种组件。其包含了Spring AOP的思想，可以拦截指定方法的执行节点。</p><p>拦截器基于动态代理和反射机制进行。</p><p><strong>拦截器的实现</strong></p><p>Spring-MVC中实现一个<code>Interceptor</code>有三种方式：</p><ul><li>实现<code>HandlerInterceptor</code>接口</li><li>继承<code>HandlerInterceptorAdapter</code>抽象类，该类实现了<code>HandlerInterceptor</code></li><li>实现<code>WebRequestInterceptor</code>接口，改接口用于普通的Web请求拦截。</li></ul><p>以<code>HandlerInterceptor</code>为例，写一个接口的实现类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//do something.</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// clean data</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供实现类之后要将其添加到MVC管理中，实现一个<code>WebMvcConfigurer</code>来注册拦截器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题"><span>相关问题</span></a></h3><ol><li>一次请求执行两次拦截器</li></ol><p>controller中的void方法会导致springmvc使用你的请求url作为视图名称，然后它在渲染视图之前会检查你的视图名称，发现这视图会导致循环请求，就抛出一个ServletException，tomcat截取到这个异常后就转发到/error页面，就在这个转发的过程中导致了springmvc重新开始DispatcherServlet的整个流程，所以拦截器自然就执行了多次。</p><p>可以在控制器中主动<code>throw new ServletException()</code>来触发两次拦截器调用。</p>`,32);function y(S,f){const s=c("center");return l(),i("div",null,[u,a(s,null,{default:e(()=>[d,t(),k,t(),v]),_:1}),m,n("div",null,[a(s,null,{default:e(()=>[b,g,h]),_:1})]),w])}const _=o(r,[["render",y],["__file","index.html.vue"]]);export{_ as default};
