import{_ as s,r as e,o as t,c as o,a as n,d as p,b as c,e as l}from"./app-Ec_z8kpw.js";const i={},u=l(`<h2 id="_1-spring-bean循环依赖" tabindex="-1"><a class="header-anchor" href="#_1-spring-bean循环依赖"><span>1. Spring Bean循环依赖</span></a></h2><p>Bean循环依赖是指多个实例之间存在相互依赖的关系。</p><h3 id="spring-bean-三级缓存" tabindex="-1"><a class="header-anchor" href="#spring-bean-三级缓存"><span>Spring Bean 三级缓存</span></a></h3><p>getSingleton函数会从三级缓存中获取目标Bean，每个缓存都是一个<code>HashMap</code>。三级缓存分别是：</p><ol><li>singletonObjects: 一级缓存</li><li>earlySingletonObjects: 二级缓存</li><li>singletonFactories: 三级缓存</li></ol><p><strong>singletonObjects</strong>存放已经实例化的实例</p><p><strong>earlySingletonObjects</strong>保存bean实例的半成品，根据是否被AOP代理分为原始的Bean半成品还是代理对象的半成品。</p><p><strong>singletonFactories</strong>存放<code>beanName</code>对应的<code>ObjectFactory</code>,添加缓存时会传入一个<code>ObjectFactory</code>的<code>lambda</code>匿名类。<code>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</code>。最终调用<code>getEarlyBeanReference</code>来获取一个<code>Bean</code>实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Quick check for existing instance without full singleton lock</span>
    <span class="token class-name">Object</span> singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Consistent creation of early reference within full singleton lock</span>
                singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三级缓存如何解决循环依赖" tabindex="-1"><a class="header-anchor" href="#三级缓存如何解决循环依赖"><span>三级缓存如何解决循环依赖</span></a></h3><p>Bean实例化的过程：</p><ol><li>createBean <ol><li>doCreateBean <ol><li>isSingletonCurrentlyInCreation 判断当前Bean是否在创建中，内部使用了一个<code>concurrentHashMap</code>做缓存，直接用<code>contains</code>判断，在<code>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</code>方法中会调用<code>beforeSingletonCreation(beanName);</code>来添加到缓存中</li><li>addSingletonFactory 添加bean到第三级缓存</li><li>populateBean 填充bean属性，这里会获取依赖的其他实例，会递归调用</li><li>initializeBean 实例化对象返回包裹对象</li><li>getSingleton 尝试从三级缓存中获取早期单例Bean的引用<code>earlySingletonReference = getSingleton(beanName, false)</code>。从第三即缓冲中删除，添加到第二级缓冲。 <ol><li>调用addInstance()方法将Bean添加到一级缓存中，再将其从2,3级缓存中删除。</li><li>创建完毕</li></ol></li><li>创建完毕。</li></ol></li></ol></li></ol><p>在存在循环依赖的情况下，假设A-&gt;B，A依赖于B。。创建A时先注册一个第三级缓存，会尝试获取B的引用，此时现在缓存中朝招，B此时没有初始化，因此尝试加载B。加载B的过程中发现依赖A，尝试获取A的引用，此时A在第三级缓存中，找到后添加到二级缓存中，并且删除A的三级缓存，返回A的引用，B的依赖解决。</p><p>此时回到A找B的依赖，这时候可以直接在一级缓存中找到B的引用，直接引用即可完成。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3>`,15),r={href:"https://zhuanlan.zhihu.com/p/610322151",target:"_blank",rel:"noopener noreferrer"};function k(d,b){const a=e("ExternalLinkIcon");return t(),o("div",null,[u,n("p",null,[n("a",r,[p("彻底搞懂Spring之三级缓存解决循环依赖问题"),c(a)])])])}const m=s(i,[["render",k],["__file","problems.html.vue"]]);export{m as default};
